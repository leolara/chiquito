Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from chiquito.dsl import Circuit, StepType
from chiquito.cb import eq
from chiquito.util import F

class FiboStep(StepType):
    def setup(self):
        self.c = self.internal("c")
        self.constr(eq(self.circuit.a + self.circuit.b, self.c))
        self.transition(eq(self.circuit.b, self.circuit.a.next()))
        self.transition(eq(self.c, self.circuit.b.next()))

    def wg(self, args):
        a_value, b_value = args
        self.assign(self.circuit.a, F(a_value))
        self.assign(self.circuit.b, F(b_value))
        self.assign(self.c, F(a_value + b_value))

class Fibonacci(Circuit):
    def setup(self):
        self.a = self.forward("a")
        self.b = self.forward("b")
        
        self.fibo_step = self.step_type(FiboStep(self, "fibo_step"))
        self.pragma_num_steps(4)
        
    def trace(self, args):
        self.add(self.fibo_step, (1, 1))
        a = 1
        b = 2
        for i in range(1, 4):
            self.add(self.fibo_step, (a, b))
            prev_a = a
            a = b
            b += prev_a

fibo = Fibonacci()
fibo_witness = fibo.gen_witness(None)
fibo.halo2_mock_prover(fibo_witness)
------------------

----- stderr -----
thread '<unnamed>' panicked at src/frontend/python/mod.rs:169:44:
Json deserialization to TraceWitness failed.: Error("invalid type: sequence, expected a hex encoded string", line: 17, column: 20)
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPanicException[0m                            Traceback (most recent call last)
Cell [0;32mIn[1], line 38[0m
[1;32m     36[0m fibo [38;5;241m=[39m Fibonacci()
[1;32m     37[0m fibo_witness [38;5;241m=[39m fibo[38;5;241m.[39mgen_witness([38;5;28;01mNone[39;00m)
[0;32m---> 38[0m [43mfibo[49m[38;5;241;43m.[39;49m[43mhalo2_mock_prover[49m[43m([49m[43mfibo_witness[49m[43m)[49m

File [0;32m~/work/chiquito/chiquito/src/frontend/python/chiquito/dsl.py:226[0m, in [0;36mCircuit.halo2_mock_prover[0;34m(self, witness, k)[0m
[1;32m    224[0m     [38;5;28mself[39m[38;5;241m.[39mrust_id: [38;5;28mint[39m [38;5;241m=[39m rust_chiquito[38;5;241m.[39mast_to_halo2(ast_json)
[1;32m    225[0m witness_json: [38;5;28mstr[39m [38;5;241m=[39m witness[38;5;241m.[39mget_witness_json()
[0;32m--> 226[0m [43mrust_chiquito[49m[38;5;241;43m.[39;49m[43mhalo2_mock_prover[49m[43m([49m[43mwitness_json[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mrust_id[49m[43m,[49m[43m [49m[43mk[49m[43m)[49m

[0;31mPanicException[0m: Json deserialization to TraceWitness failed.: Error("invalid type: sequence, expected a hex encoded string", line: 17, column: 20)

